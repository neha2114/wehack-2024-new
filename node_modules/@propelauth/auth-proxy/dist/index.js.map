{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import http, { IncomingMessage, ServerResponse } from 'http'\nimport httpProxy from 'http-proxy'\nimport cookie, { CookieSerializeOptions } from 'cookie'\nimport { Auth, initAuthByFetchingConfig } from '@propelauth/backend-js-utilities'\n\nexport type ProxyTargetOptions = {\n    host: string\n    port: number\n    protocol: 'http:' | 'https:'\n}\n\nexport type InitializeAuthProxyOptions = {\n    authUrl: string\n    integrationApiKey: string\n    urlWhereYourProxyIsRunning: string\n    proxyPort: number\n    target: ProxyTargetOptions\n    verifierKey?: string\n}\n\nexport async function initializeAuthProxy({\n    authUrl,\n    integrationApiKey,\n    urlWhereYourProxyIsRunning,\n    proxyPort,\n    target,\n}: InitializeAuthProxyOptions) {\n    const urlWhereYourProxyIsRunningOrigin = new URL(urlWhereYourProxyIsRunning).origin\n    const auth = await initAuthByFetchingConfig({\n        authUrl,\n        integrationApiKey,\n        redirectUri: `${urlWhereYourProxyIsRunningOrigin}/api/auth/callback`,\n    })\n\n    const proxy = new (httpProxy.createProxyServer as any)({\n        target,\n        changeOrigin: true,\n        secure: target.protocol === 'https:',\n    })\n\n    proxy.on('proxyRes', function (proxyRes: any, req: OurIncomingMessage) {\n        const existingCookies = proxyRes.headers['set-cookie'] || []\n        if (req._access_token) {\n            const { accessTokenCookieValue, shortAccessTokenCookieValue } = getAccessTokenCookieValues(\n                req._access_token\n            )\n            existingCookies.push(accessTokenCookieValue)\n            existingCookies.push(shortAccessTokenCookieValue)\n        }\n        if (req._refresh_token) {\n            const refreshTokenCookieValue = getRefreshTokenCookieValue(req._refresh_token)\n            existingCookies.push(refreshTokenCookieValue)\n        }\n        proxyRes.headers['set-cookie'] = existingCookies\n    })\n\n    const proxyServer = http.createServer(function (basicReq, res) {\n        // This is just for type purposes\n        const req = basicReq as OurIncomingMessage\n        parseUrlAndAddToReq(req)\n\n        const cookies = cookie.parse(req.headers.cookie || '')\n        const accessToken = cookies[ACCESS_TOKEN_COOKIE_NAME]\n        const shortAccessToken = cookies[SHORT_ACCESS_TOKEN_COOKIE_NAME]\n        const refreshToken = cookies[REFRESH_TOKEN_COOKIE_NAME]\n\n        if (req.method === 'GET') {\n            if (req._pathname === '/api/auth/login' || req._pathname === '/api/auth/signup') {\n                const isSignup = req._pathname === '/api/auth/signup'\n                return redirectToSignupOrLogin(auth, isSignup, res)\n            } else if (req._pathname === '/api/auth/callback') {\n                return callbackHandler(auth, req, res)\n            } else if (req._pathname === '/api/auth/logout') {\n                return logoutGetHandler(auth, req, res)\n            }\n        } else if (req.method === 'POST') {\n            if (req._pathname === '/api/auth/logout') {\n                return logoutPostHandler(auth, req, res)\n            }\n        }\n\n        if (shortAccessToken) {\n            proxy.web(req, res)\n            return\n        }\n\n        if (refreshToken) {\n            auth.token.refreshTokens(refreshToken).then((response) => {\n                if (response.error === 'none') {\n                    req._access_token = response.accessToken\n                    req._refresh_token = response.refreshToken\n                    proxy.web(req, res)\n                } else if (response.error === 'unauthorized') {\n                    // Redirect to login page\n                    redirectToSignupOrLogin(auth, false, res)\n                } else {\n                    // Unexpected error, if we still have a valid access token, we can still proxy the request\n                    if (accessToken) {\n                        proxy.web(req, res)\n                    } else {\n                        res.writeHead(500)\n                        res.end()\n                    }\n                }\n            })\n        } else {\n            // Redirect to login page\n            redirectToSignupOrLogin(auth, false, res)\n        }\n    })\n\n    proxyServer.on('upgrade', function (req, socket, head) {\n        proxy.ws(req, socket, head)\n    })\n\n    proxyServer.on('error', function (err: unknown, req: OurIncomingMessage, res: ServerResponse) {\n        res.writeHead(500, {\n            'Content-Type': 'text/plain',\n        })\n        res.end('An unexpected error occurred')\n    })\n\n    return proxyServer.listen(proxyPort)\n}\n\nconst ACCESS_TOKEN_COOKIE_NAME = '__pa_at'\nconst SHORT_ACCESS_TOKEN_COOKIE_NAME = '__pa_ats'\nconst REFRESH_TOKEN_COOKIE_NAME = '__pa_rt'\nconst STATE_COOKIE_NAME = '__pa_state'\n\nconst DEFAULT_COOKIE_OPTIONS: CookieSerializeOptions = {\n    httpOnly: true,\n    secure: true,\n    path: '/',\n    sameSite: 'lax',\n}\n\nfunction getAccessTokenCookieValues(accessToken: string | undefined) {\n    if (accessToken) {\n        const accessTokenCookieValue = cookie.serialize(ACCESS_TOKEN_COOKIE_NAME, accessToken, {\n            ...DEFAULT_COOKIE_OPTIONS,\n            maxAge: 60 * 29,\n        })\n        const shortAccessTokenCookieValue = cookie.serialize(SHORT_ACCESS_TOKEN_COOKIE_NAME, accessToken, {\n            ...DEFAULT_COOKIE_OPTIONS,\n            maxAge: 60 * 10,\n        })\n        return { accessTokenCookieValue, shortAccessTokenCookieValue }\n    } else {\n        const accessTokenCookieValue = cookie.serialize(ACCESS_TOKEN_COOKIE_NAME, '', {\n            ...DEFAULT_COOKIE_OPTIONS,\n            maxAge: 0,\n        })\n        const shortAccessTokenCookieValue = cookie.serialize(SHORT_ACCESS_TOKEN_COOKIE_NAME, '', {\n            ...DEFAULT_COOKIE_OPTIONS,\n            maxAge: 0,\n        })\n        return { accessTokenCookieValue, shortAccessTokenCookieValue }\n    }\n}\n\nfunction getRefreshTokenCookieValue(refreshToken: string | undefined) {\n    if (refreshToken) {\n        return cookie.serialize(REFRESH_TOKEN_COOKIE_NAME, refreshToken, DEFAULT_COOKIE_OPTIONS)\n    } else {\n        return cookie.serialize(REFRESH_TOKEN_COOKIE_NAME, '', {\n            ...DEFAULT_COOKIE_OPTIONS,\n            maxAge: 0,\n        })\n    }\n}\n\nfunction setCookiesAndRedirectToHome(\n    res: ServerResponse,\n    accessToken: string | undefined,\n    refreshToken: string | undefined\n) {\n    const { accessTokenCookieValue, shortAccessTokenCookieValue } = getAccessTokenCookieValues(accessToken)\n    const refreshTokenCookieValue = getRefreshTokenCookieValue(refreshToken)\n    res.writeHead(302, {\n        Location: '/',\n        'Set-Cookie': [accessTokenCookieValue, shortAccessTokenCookieValue, refreshTokenCookieValue],\n    })\n    res.end()\n}\n\nfunction redirectToSignupOrLogin(auth: Auth, isSignup: boolean, res: ServerResponse) {\n    const { authorizeUrl, state } = auth.user.redirectToSignupOrLogin(isSignup)\n    res.writeHead(302, {\n        Location: authorizeUrl,\n        'Set-Cookie': cookie.serialize(STATE_COOKIE_NAME, state, DEFAULT_COOKIE_OPTIONS),\n    })\n    res.end()\n}\n\nasync function callbackHandler(auth: Auth, req: OurIncomingMessage, res: ServerResponse) {\n    const stateFromCookie = cookie.parse(req.headers.cookie || '')[STATE_COOKIE_NAME]\n    const stateFromQueryParams = req._queryParams.get('state') || undefined\n    const codeFromQueryParams = req._queryParams.get('code') || undefined\n\n    const response = await auth.user.finishLogin({\n        stateFromCookie,\n        stateFromQueryParams,\n        codeFromQueryParams,\n    })\n\n    if (response.error) {\n        if (response.error_type === 'state_mismatch') {\n            return redirectToSignupOrLogin(auth, false, res)\n        }\n\n        if (response.error_type === 'bad_config') {\n            console.log(\n                \"Couldn't finish the login process for this user. This is most likely caused by an incorrect PROPELAUTH_API_KEY.\"\n            )\n        }\n\n        res.writeHead(500)\n        res.write('Unexpected error')\n        res.end()\n        return\n    }\n\n    return setCookiesAndRedirectToHome(res, response.accessToken, response.refreshToken)\n}\n\n// Note that the login GET handler is just used to clear cookies if they are logged out.\n// The actual logout process is handled by the logout POST handler.\nasync function logoutGetHandler(auth: Auth, req: OurIncomingMessage, res: ServerResponse) {\n    const cookies = cookie.parse(req.headers.cookie || '')\n    const refreshToken = cookies[REFRESH_TOKEN_COOKIE_NAME]\n\n    if (!refreshToken) {\n        return setCookiesAndRedirectToHome(res, undefined, undefined)\n    }\n\n    const response = await auth.token.refreshTokens(refreshToken)\n    if (response.error === 'none') {\n        return setCookiesAndRedirectToHome(res, response.accessToken, response.refreshToken)\n    } else if (response.error === 'unauthorized') {\n        return setCookiesAndRedirectToHome(res, undefined, undefined)\n    } else {\n        // Unexpected error\n        res.writeHead(500)\n        res.end()\n    }\n}\n\nasync function logoutPostHandler(auth: Auth, req: OurIncomingMessage, res: ServerResponse) {\n    const cookies = cookie.parse(req.headers.cookie || '')\n    const refreshToken = cookies[REFRESH_TOKEN_COOKIE_NAME]\n\n    if (!refreshToken) {\n        return setCookiesAndRedirectToHome(res, undefined, undefined)\n    }\n\n    const response = await auth.user.logout(refreshToken)\n    if (response.success) {\n        return setCookiesAndRedirectToHome(res, undefined, undefined)\n    } else {\n        // Unexpected error\n        res.writeHead(500)\n        res.end()\n    }\n}\n\ninterface OurIncomingMessage extends IncomingMessage {\n    _pathname: string\n    _queryParams: URLSearchParams\n    _access_token: string | undefined\n    _refresh_token: string | undefined\n}\n\nfunction parseUrlAndAddToReq(req: OurIncomingMessage) {\n    if (req.url?.startsWith('/')) {\n        // `http://localhost` is arbitrary, it just needs to be a valid URL\n        const parsedUrl = new URL(`http://localhost${req.url}`)\n        const pathname = parsedUrl.pathname\n        const queryParams = parsedUrl.searchParams\n        req._pathname = pathname\n        req._queryParams = queryParams\n    }\n}\n"],"mappings":"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","names":["httpProxy","http","cookie"]}